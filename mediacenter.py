#!/usr/bin/env python3
import os
import shutil
import subprocess
import threading
import time
import sys
from datetime import datetime
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from configparser import ConfigParser

# === Konfiguration ===
CONFIG_PATH = "local.conf"
SSD_BASE = "/media/ssd"
USB_BASE = "/media/usb"
LOG_FILE = "transfer.log"
POLL_INTERVAL = 5  # Sekunden

# === Initialisierung ===
os.makedirs(SSD_BASE, exist_ok=True)
os.makedirs(USB_BASE, exist_ok=True)
config = ConfigParser()
if os.path.exists(CONFIG_PATH):
    config.read(CONFIG_PATH)
else:
    config["GENERAL"] = {"event_title": "Unbenannte Veranstaltung"}
    config["USERS"] = {}
    with open(CONFIG_PATH, "w") as f:
        config.write(f)

#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jun 19, 2025 06:23:22 PM CEST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

#import autosave.tcl_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: autosave.tcl_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("480x320+676+328")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("SJB - MediaCenter")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.combobox = tk.StringVar()

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        _style_code()
        self.TSeparator1 = ttk.Separator(self.top)
        self.TSeparator1.place(relx=0.042, rely=0.469,  relwidth=0.917)

        self.Label3_1 = tk.Label(self.top)
        self.Label3_1.place(relx=0.027, rely=0.369, height=21, width=64)
        self.Label3_1.configure(activebackground="#d9d9d9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(anchor='w')
        self.Label3_1.configure(background="#d9d9d9")
        self.Label3_1.configure(compound='left')
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font="-family {Segoe UI} -size 9")
        self.Label3_1.configure(foreground="#000000")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="#000000")
        self.Label3_1.configure(text='''Progress''')

        self.Label3 = tk.Label(self.top)
        self.Label3.place(relx=0.027, rely=0.269, height=21, width=64)
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 9")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="#000000")
        self.Label3.configure(text='''Select disk''')

        self.Label3_1_1 = tk.Label(self.top)
        self.Label3_1_1.place(relx=0.027, rely=0.484, height=21, width=64)
        self.Label3_1_1.configure(activebackground="#d9d9d9")
        self.Label3_1_1.configure(activeforeground="black")
        self.Label3_1_1.configure(anchor='w')
        self.Label3_1_1.configure(background="#d9d9d9")
        self.Label3_1_1.configure(compound='left')
        self.Label3_1_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1_1.configure(font="-family {Segoe UI} -size 9")
        self.Label3_1_1.configure(foreground="#000000")
        self.Label3_1_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1_1.configure(highlightcolor="#000000")
        self.Label3_1_1.configure(text='''User''')

        self.Label4 = tk.Label(self.top)
        self.Label4.place(relx=0.225, rely=0.906, height=21, width=264)
        self.Label4.configure(activebackground="#d9d9d9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 9")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="#000000")
        self.Label4.configure(text='''All settings are stored in local.conf''')

        self.LabelTitel = tk.Label(self.top)
        self.LabelTitel.place(relx=0.36, rely=-0.006, height=31, width=134)
        self.LabelTitel.configure(activebackground="#d9d9d9")
        self.LabelTitel.configure(activeforeground="black")
        self.LabelTitel.configure(background="#d9d9d9")
        self.LabelTitel.configure(compound='left')
        self.LabelTitel.configure(disabledforeground="#a3a3a3")
        self.LabelTitel.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.LabelTitel.configure(foreground="#000000")
        self.LabelTitel.configure(highlightbackground="#d9d9d9")
        self.LabelTitel.configure(highlightcolor="#000000")
        self.LabelTitel.configure(text='''MediaCenter''')

        self.LabelSubtitle = tk.Label(self.top)
        self.LabelSubtitle.place(relx=0.329, rely=0.072, height=15, width=164)
        self.LabelSubtitle.configure(activebackground="#d9d9d9")
        self.LabelSubtitle.configure(activeforeground="black")
        self.LabelSubtitle.configure(background="#d9d9d9")
        self.LabelSubtitle.configure(compound='left')
        self.LabelSubtitle.configure(disabledforeground="#a3a3a3")
        self.LabelSubtitle.configure(font="-family {Segoe UI} -size 8 -slant italic")
        self.LabelSubtitle.configure(foreground="#000000")
        self.LabelSubtitle.configure(highlightbackground="#d9d9d9")
        self.LabelSubtitle.configure(highlightcolor="#000000")
        self.LabelSubtitle.configure(text='''Powerd by Studio Justin Braun''')

        self.ButtonSettings = tk.Button(self.top)
        self.ButtonSettings.place(relx=0.833, rely=0.031, height=26, width=67)
        self.ButtonSettings.configure(activebackground="#d9d9d9")
        self.ButtonSettings.configure(activeforeground="black")
        self.ButtonSettings.configure(background="#d9d9d9")
        self.ButtonSettings.configure(disabledforeground="#a3a3a3")
        self.ButtonSettings.configure(font="-family {Segoe UI} -size 9")
        self.ButtonSettings.configure(foreground="#000000")
        self.ButtonSettings.configure(highlightbackground="#d9d9d9")
        self.ButtonSettings.configure(highlightcolor="#000000")
        self.ButtonSettings.configure(text='''Settings''')

        self.ButtonRestart = tk.Button(self.top)
        self.ButtonRestart.place(relx=0.671, rely=0.031, height=26, width=67)
        self.ButtonRestart.configure(activebackground="#d9d9d9")
        self.ButtonRestart.configure(activeforeground="black")
        self.ButtonRestart.configure(background="#d9d9d9")
        self.ButtonRestart.configure(disabledforeground="#a3a3a3")
        self.ButtonRestart.configure(font="-family {Segoe UI} -size 9")
        self.ButtonRestart.configure(foreground="#000000")
        self.ButtonRestart.configure(highlightbackground="#d9d9d9")
        self.ButtonRestart.configure(highlightcolor="#000000")
        self.ButtonRestart.configure(text='''Restart''')

        self.ButtonReload = tk.Button(self.top)
        self.ButtonReload.place(relx=0.19, rely=0.031, height=26, width=67)
        self.ButtonReload.configure(activebackground="#d9d9d9")
        self.ButtonReload.configure(activeforeground="black")
        self.ButtonReload.configure(background="#d9d9d9")
        self.ButtonReload.configure(disabledforeground="#a3a3a3")
        self.ButtonReload.configure(font="-family {Segoe UI} -size 9")
        self.ButtonReload.configure(foreground="#000000")
        self.ButtonReload.configure(highlightbackground="#d9d9d9")
        self.ButtonReload.configure(highlightcolor="#000000")
        self.ButtonReload.configure(text='''Reload''')

        self.ButtonEject = tk.Button(self.top)
        self.ButtonEject.place(relx=0.027, rely=0.031, height=26, width=67)
        self.ButtonEject.configure(activebackground="#d9d9d9")
        self.ButtonEject.configure(activeforeground="black")
        self.ButtonEject.configure(background="#d9d9d9")
        self.ButtonEject.configure(disabledforeground="#a3a3a3")
        self.ButtonEject.configure(font="-family {Segoe UI} -size 9")
        self.ButtonEject.configure(foreground="#000000")
        self.ButtonEject.configure(highlightbackground="#d9d9d9")
        self.ButtonEject.configure(highlightcolor="#000000")
        self.ButtonEject.configure(text='''Eject Disk''')

        self.TProgressbarCopy = ttk.Progressbar(self.top)
        self.TProgressbarCopy.place(relx=0.167, rely=0.375, relwidth=0.806
                , relheight=0.0, height=19)
        self.TProgressbarCopy.configure(length="450")

        self.ButtonUser1 = tk.Button(self.top)
        self.ButtonUser1.place(relx=0.027, rely=0.556, height=26, width=145)
        self.ButtonUser1.configure(activebackground="#d9d9d9")
        self.ButtonUser1.configure(activeforeground="black")
        self.ButtonUser1.configure(background="#d9d9d9")
        self.ButtonUser1.configure(disabledforeground="#a3a3a3")
        self.ButtonUser1.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser1.configure(foreground="#000000")
        self.ButtonUser1.configure(highlightbackground="#d9d9d9")
        self.ButtonUser1.configure(highlightcolor="#000000")
        self.ButtonUser1.configure(text='''Not defined''')

        self.ButtonUser2 = tk.Button(self.top)
        self.ButtonUser2.place(relx=0.027, rely=0.669, height=26, width=145)
        self.ButtonUser2.configure(activebackground="#d9d9d9")
        self.ButtonUser2.configure(activeforeground="black")
        self.ButtonUser2.configure(background="#d9d9d9")
        self.ButtonUser2.configure(disabledforeground="#a3a3a3")
        self.ButtonUser2.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser2.configure(foreground="#000000")
        self.ButtonUser2.configure(highlightbackground="#d9d9d9")
        self.ButtonUser2.configure(highlightcolor="#000000")
        self.ButtonUser2.configure(text='''Not defined''')

        self.ButtonUser3 = tk.Button(self.top)
        self.ButtonUser3.place(relx=0.027, rely=0.781, height=26, width=145)
        self.ButtonUser3.configure(activebackground="#d9d9d9")
        self.ButtonUser3.configure(activeforeground="black")
        self.ButtonUser3.configure(background="#d9d9d9")
        self.ButtonUser3.configure(disabledforeground="#a3a3a3")
        self.ButtonUser3.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser3.configure(foreground="#000000")
        self.ButtonUser3.configure(highlightbackground="#d9d9d9")
        self.ButtonUser3.configure(highlightcolor="#000000")
        self.ButtonUser3.configure(text='''Not defined''')

        self.ButtonUser4 = tk.Button(self.top)
        self.ButtonUser4.place(relx=0.35, rely=0.556, height=26, width=145)
        self.ButtonUser4.configure(activebackground="#d9d9d9")
        self.ButtonUser4.configure(activeforeground="black")
        self.ButtonUser4.configure(background="#d9d9d9")
        self.ButtonUser4.configure(disabledforeground="#a3a3a3")
        self.ButtonUser4.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser4.configure(foreground="#000000")
        self.ButtonUser4.configure(highlightbackground="#d9d9d9")
        self.ButtonUser4.configure(highlightcolor="#000000")
        self.ButtonUser4.configure(text='''Not defined''')

        self.ButtonUser5 = tk.Button(self.top)
        self.ButtonUser5.place(relx=0.35, rely=0.669, height=26, width=145)
        self.ButtonUser5.configure(activebackground="#d9d9d9")
        self.ButtonUser5.configure(activeforeground="black")
        self.ButtonUser5.configure(background="#d9d9d9")
        self.ButtonUser5.configure(disabledforeground="#a3a3a3")
        self.ButtonUser5.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser5.configure(foreground="#000000")
        self.ButtonUser5.configure(highlightbackground="#d9d9d9")
        self.ButtonUser5.configure(highlightcolor="#000000")
        self.ButtonUser5.configure(text='''Not defined''')

        self.ButtonUser6 = tk.Button(self.top)
        self.ButtonUser6.place(relx=0.35, rely=0.781, height=26, width=145)
        self.ButtonUser6.configure(activebackground="#d9d9d9")
        self.ButtonUser6.configure(activeforeground="black")
        self.ButtonUser6.configure(background="#d9d9d9")
        self.ButtonUser6.configure(disabledforeground="#a3a3a3")
        self.ButtonUser6.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser6.configure(foreground="#000000")
        self.ButtonUser6.configure(highlightbackground="#d9d9d9")
        self.ButtonUser6.configure(highlightcolor="#000000")
        self.ButtonUser6.configure(text='''Not defined''')

        self.ButtonUser7 = tk.Button(self.top)
        self.ButtonUser7.place(relx=0.673, rely=0.556, height=26, width=145)
        self.ButtonUser7.configure(activebackground="#d9d9d9")
        self.ButtonUser7.configure(activeforeground="black")
        self.ButtonUser7.configure(background="#d9d9d9")
        self.ButtonUser7.configure(disabledforeground="#a3a3a3")
        self.ButtonUser7.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser7.configure(foreground="#000000")
        self.ButtonUser7.configure(highlightbackground="#d9d9d9")
        self.ButtonUser7.configure(highlightcolor="#000000")
        self.ButtonUser7.configure(text='''Not defined''')

        self.ButtonUser8 = tk.Button(self.top)
        self.ButtonUser8.place(relx=0.673, rely=0.669, height=26, width=145)
        self.ButtonUser8.configure(activebackground="#d9d9d9")
        self.ButtonUser8.configure(activeforeground="black")
        self.ButtonUser8.configure(background="#d9d9d9")
        self.ButtonUser8.configure(disabledforeground="#a3a3a3")
        self.ButtonUser8.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser8.configure(foreground="#000000")
        self.ButtonUser8.configure(highlightbackground="#d9d9d9")
        self.ButtonUser8.configure(highlightcolor="#000000")
        self.ButtonUser8.configure(text='''Not defined''')

        self.ButtonUser9 = tk.Button(self.top)
        self.ButtonUser9.place(relx=0.673, rely=0.781, height=26, width=145)
        self.ButtonUser9.configure(activebackground="#d9d9d9")
        self.ButtonUser9.configure(activeforeground="black")
        self.ButtonUser9.configure(background="#d9d9d9")
        self.ButtonUser9.configure(disabledforeground="#a3a3a3")
        self.ButtonUser9.configure(font="-family {Segoe UI} -size 9")
        self.ButtonUser9.configure(foreground="#000000")
        self.ButtonUser9.configure(highlightbackground="#d9d9d9")
        self.ButtonUser9.configure(highlightcolor="#000000")
        self.ButtonUser9.configure(text='''Not defined''')

        self.TComboboxDisk = ttk.Combobox(self.top)
        self.TComboboxDisk.place(relx=0.167, rely=0.272, relheight=0.059
                , relwidth=0.806)
        self.TComboboxDisk.configure(font="-family {Segoe UI} -size 9")
        self.TComboboxDisk.configure(textvariable=self.combobox)

        self.EventTitle = tk.Label(self.top)
        self.EventTitle.place(relx=0.027, rely=0.15, height=21, width=454)
        self.EventTitle.configure(activebackground="#d9d9d9")
        self.EventTitle.configure(activeforeground="black")
        self.EventTitle.configure(background="#d9d9d9")
        self.EventTitle.configure(compound='left')
        self.EventTitle.configure(disabledforeground="#a3a3a3")
        self.EventTitle.configure(font="-family {Segoe UI} -size 12")
        self.EventTitle.configure(foreground="#000000")
        self.EventTitle.configure(highlightbackground="#d9d9d9")
        self.EventTitle.configure(highlightcolor="#000000")
        self.EventTitle.configure(text='''No event title assigned''')



#if __name__ == '__main__':
    #autosave.tcl_support.main()

# === Hilfsfunktionen ===
def save_config():
    with open(CONFIG_PATH, "w") as f:
        config.write(f)

def log_transfer(user, source, dest, count):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a") as f:
        f.write(f"{ts} | {user} | {source} -> {dest} | files: {count}\n")

def get_mounted_usb_devices():
    return sorted({line.split()[1] for line in open("/proc/mounts")
                   if line.startswith("/dev/sd") and "/media/" in line})

def detect_and_mount_usb():
    for part in os.listdir("/dev"):
        if part.startswith("sd") and part[-1].isdigit():
            dev = f"/dev/{part}"
            if not any(dev in line for line in open("/proc/mounts")):
                for idx in range(1, 10):
                    mount_point = f"{USB_BASE}{idx}"
                    if not os.path.exists(mount_point):
                        os.makedirs(mount_point, exist_ok=True)
                    os.system(f"mount {dev} {mount_point} 2>/dev/null")
                    break

def poll_usb():
    while True:
        detect_and_mount_usb()
        update_sources()
        time.sleep(POLL_INTERVAL)

def update_sources():
    mounts = get_mounted_usb_devices()
    source_menu["values"] = mounts
    current = source_var.get()
    if current not in mounts:
        source_var.set(mounts[0] if mounts else "")

def copy_with_progress(src_dir, dst_dir, user, source):
    try:
        files = os.listdir(src_dir)
    except Exception as e:
        messagebox.showerror("Fehler beim Lesen", f"{src_dir} konnte nicht gelesen werden:\n{str(e)}")
        return

    if not files:
        messagebox.showinfo("Keine Dateien", "Keine Dateien im Quelllaufwerk gefunden.")
        return

    os.makedirs(dst_dir, exist_ok=True)
    progress["maximum"] = len(files)
    for idx, f in enumerate(files, start=1):
        try:
            shutil.move(os.path.join(src_dir, f), os.path.join(dst_dir, f))
        except Exception as e:
            messagebox.showerror("Fehler beim Kopieren", f"Datei konnte nicht verschoben werden:\n{f}\n{str(e)}")
        progress["value"] = idx
        root.update_idletasks()
    log_transfer(user, source, dst_dir, len(files))
    messagebox.showinfo("Fertig", f"{len(files)} Datei(en) verschoben.")
    progress["value"] = 0

def on_user_button(u):
    src = source_var.get()
    if not src or not os.path.ismount(src):
        messagebox.showerror("Fehler", f"{src} ist nicht gemountet.")
        return
    event = config["GENERAL"].get("event_title")
    dest = os.path.join(SSD_BASE, event, u)
    threading.Thread(target=copy_with_progress, args=(src, dest, u, src), daemon=True).start()

def eject_device():
    src = source_var.get()
    if src:
        os.system(f"udisksctl unmount -b $(findmnt -n -o SOURCE {src})")
        os.system(f"udisksctl power-off -b $(findmnt -n -o SOURCE {src})")
        update_sources()

def add_user():
    name = simpledialog.askstring("Benutzer hinzufügen", "Name:")
    if name:
        config["USERS"][name] = ""
        save_config()
        refresh_user_list()

def edit_settings():
    def save_settings():
        new_title = title_var.get()
        config["GENERAL"]["event_title"] = new_title
        save_config()
        event_label.config(text=new_title)
        settings_win.destroy()

    settings_win = tk.Toplevel(root)
    settings_win.title("Einstellungen")
    tk.Label(settings_win, text="Veranstaltungstitel:").pack(pady=5)
    title_var = tk.StringVar(value=config["GENERAL"].get("event_title"))
    title_entry = tk.Entry(settings_win, textvariable=title_var, width=30)
    title_entry.pack(pady=5)
    title_entry.bind("<Button-1>", lambda e: subprocess.Popen(["matchbox-keyboard"]))
    tk.Button(settings_win, text="Speichern", command=save_settings).pack(pady=10)

def refresh_user_list():
    for w in user_frame.winfo_children():
        w.destroy()

    refresh_frame = tk.Frame(user_frame)
    refresh_frame.pack(pady=5)
    tk.Button(refresh_frame, text="🔄 Aktualisieren", command=update_sources, width=20, height=2).pack()

    for u in config["USERS"]:
        row = tk.Frame(user_frame)
        row.pack(pady=2)
        btn = tk.Button(row, text=u, width=18, height=2, command=lambda u=u: on_user_button(u))
        btn.pack(side="left")
        eject = tk.Button(row, text="Auswerfen", command=eject_device)
        eject.pack(side="left", padx=5)
        
def restart_program():
    root.destroy()
    time.sleep(2)
    os.execv(sys.executable, ['python3'] + sys.argv)
    
def open_config_editor():
    subprocess.Popen(["mousepad", CONFIG_PATH])

# === GUI Start ===


root = tk.Tk()
app = Toplevel1(root)

# GUI-Elemente verbinden
source_var = app.combobox
source_menu = app.TComboboxDisk
progress = app.TProgressbarCopy
event_label = app.EventTitle

app.ButtonUser1.configure(command=lambda: on_user_button(app.ButtonUser1.cget("text")))
app.ButtonUser2.configure(command=lambda: on_user_button(app.ButtonUser2.cget("text")))
app.ButtonUser3.configure(command=lambda: on_user_button(app.ButtonUser3.cget("text")))
app.ButtonUser4.configure(command=lambda: on_user_button(app.ButtonUser4.cget("text")))
app.ButtonUser5.configure(command=lambda: on_user_button(app.ButtonUser5.cget("text")))
app.ButtonUser6.configure(command=lambda: on_user_button(app.ButtonUser6.cget("text")))
app.ButtonUser7.configure(command=lambda: on_user_button(app.ButtonUser7.cget("text")))
app.ButtonUser8.configure(command=lambda: on_user_button(app.ButtonUser8.cget("text")))
app.ButtonUser9.configure(command=lambda: on_user_button(app.ButtonUser9.cget("text")))

app.ButtonEject.configure(command=eject_device)
app.ButtonSettings.configure(command=open_config_editor)
app.ButtonReload.configure(command=update_sources)
app.ButtonRestart.configure(command=restart_program)

# Benutzer in Buttons eintragen
def refresh_user_list():
    users = list(config["USERS"].keys())
    buttons = [app.ButtonUser1, app.ButtonUser2, app.ButtonUser3,
               app.ButtonUser4, app.ButtonUser5, app.ButtonUser6,
               app.ButtonUser7, app.ButtonUser8, app.ButtonUser9]
    for i, btn in enumerate(buttons):
        if i < len(users):
            btn.configure(text=users[i], state="normal", command=lambda u=users[i]: on_user_button(u))
        else:
            btn.configure(text="Not defined", state="disabled")

refresh_user_list()
update_sources()
threading.Thread(target=poll_usb, daemon=True).start()
event_label.configure(text=config["GENERAL"].get("event_title", "Unbenannte Veranstaltung"))

root.mainloop()
