#!/usr/bin/env python3
import os
import shutil
import subprocess
import threading
import time
import sys
from datetime import datetime
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from configparser import ConfigParser
try:
    import requests
    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

VERSION = "0.1.0"
UPDATE_URL = "https://raw.githubusercontent.com/studio-justin-braun/MediaCenterPi/main/mediacenter.py"

try:
    import pyudev
    USE_UDEV = True
except ImportError:
    USE_UDEV = False

# === Konfiguration ===
CONFIG_PATH = "local.conf"
SSD_BASE = "/media/ssd"
USB_BASE = "/media/usb"
LOG_FILE = "transfer.log"
POLL_INTERVAL = 5  # Sekunden

# === Initialisierung ===
os.makedirs(SSD_BASE, exist_ok=True)
os.makedirs(USB_BASE, exist_ok=True)
config = ConfigParser()
if os.path.exists(CONFIG_PATH):
    config.read(CONFIG_PATH)
else:
    config["GENERAL"] = {"event_title": "Unbenannte Veranstaltung"}
    config["USERS"] = {}
    with open(CONFIG_PATH, "w") as f:
        config.write(f)

#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jun 19, 2025 06:23:22 PM CEST  platform: Windows NT

import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

#import autosave.tcl_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: autosave.tcl_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("480x320+676+328")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("SJB - MediaCenter")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.combobox = tk.StringVar()

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        _style_code()
        self.TSeparator1 = ttk.Separator(self.top)
        self.TSeparator1.place(relx=0.042, rely=0.469,  relwidth=0.917)

        self.Label3_1 = tk.Label(self.top)
        self.Label3_1.place(relx=0.027, rely=0.369, height=21, width=64)
        self.Label3_1.configure(activebackground="#d9d9d9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(anchor='w')
        self.Label3_1.configure(background="#d9d9d9")
        self.Label3_1.configure(compound='left')
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font="-family {Segoe UI} -size 9")
        self.Label3_1.configure(foreground="#000000")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="#000000")
        self.Label3_1.configure(text='''Progress''')

        self.Label3 = tk.Label(self.top)
        self.Label3.place(relx=0.027, rely=0.269, height=21, width=64)
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 9")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="#000000")
        self.Label3.configure(text='''Select disk''')

        self.Label3_1_1 = tk.Label(self.top)
        self.Label3_1_1.place(relx=0.027, rely=0.484, height=21, width=64)
        self.Label3_1_1.configure(activebackground="#d9d9d9")
        self.Label3_1_1.configure(activeforeground="black")
        self.Label3_1_1.configure(anchor='w')
        self.Label3_1_1.configure(background="#d9d9d9")
        self.Label3_1_1.configure(compound='left')
        self.Label3_1_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1_1.configure(font="-family {Segoe UI} -size 9")
        self.Label3_1_1.configure(foreground="#000000")
        self.Label3_1_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1_1.configure(highlightcolor="#000000")
        self.Label3_1_1.configure(text='''User''')

        self.Label4 = tk.Label(self.top)
        self.Label4.place(relx=0.225, rely=0.906, height=21, width=264)
        self.Label4.configure(activebackground="#d9d9d9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 9")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="#000000")
        self.Label4.configure(text='''All settings are stored in local.conf''')

        self.LabelTitel = tk.Label(self.top)
        self.LabelTitel.place(relx=0.36, rely=-0.006, height=31, width=134)
        self.LabelTitel.configure(activebackground="#d9d9d9")
        self.LabelTitel.configure(activeforeground="black")
        self.LabelTitel.configure(background="#d9d9d9")
        self.LabelTitel.configure(compound='left')
        self.LabelTitel.configure(disabledforeground="#a3a3a3")
        self.LabelTitel.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.LabelTitel.configure(foreground="#000000")
        self.LabelTitel.configure(highlightbackground="#d9d9d9")
        self.LabelTitel.configure(highlightcolor="#000000")
        self.LabelTitel.configure(text='''MediaCenter''')

        self.LabelSubtitle = tk.Label(self.top)
        self.LabelSubtitle.place(relx=0.329, rely=0.072, height=15, width=164)
        self.LabelSubtitle.configure(activebackground="#d9d9d9")
        self.LabelSubtitle.configure(activeforeground="black")
        self.LabelSubtitle.configure(background="#d9d9d9")
        self.LabelSubtitle.configure(compound='left')
        self.LabelSubtitle.configure(disabledforeground="#a3a3a3")
        self.LabelSubtitle.configure(font="-family {Segoe UI} -size 8 -slant italic")
        self.LabelSubtitle.configure(foreground="#000000")
        self.LabelSubtitle.configure(highlightbackground="#d9d9d9")
        self.LabelSubtitle.configure(highlightcolor="#000000")
        self.LabelSubtitle.configure(text='''Powerd by Studio Justin Braun''')

        self.ButtonSettings = tk.Button(self.top)
        self.ButtonSettings.place(relx=0.833, rely=0.031, height=26, width=67)
        self.ButtonSettings.configure(activebackground="#d9d9d9")
        self.ButtonSettings.configure(activeforeground="black")
        self.ButtonSettings.configure(background="#d9d9d9")
        self.ButtonSettings.configure(disabledforeground="#a3a3a3")
        self.ButtonSettings.configure(font="-family {Segoe UI} -size 9")
        self.ButtonSettings.configure(foreground="#000000")
        self.ButtonSettings.configure(highlightbackground="#d9d9d9")
        self.ButtonSettings.configure(highlightcolor="#000000")
        self.ButtonSettings.configure(text='''Settings''')

        self.ButtonRestart = tk.Button(self.top)
        self.ButtonRestart.place(relx=0.671, rely=0.031, height=26, width=67)
        self.ButtonRestart.configure(activebackground="#d9d9d9")
        self.ButtonRestart.configure(activeforeground="black")
        self.ButtonRestart.configure(background="#d9d9d9")
        self.ButtonRestart.configure(disabledforeground="#a3a3a3")
        self.ButtonRestart.configure(font="-family {Segoe UI} -size 9")
        self.ButtonRestart.configure(foreground="#000000")
        self.ButtonRestart.configure(highlightbackground="#d9d9d9")
        self.ButtonRestart.configure(highlightcolor="#000000")
        self.ButtonRestart.configure(text='''Restart''')

        self.ButtonReload = tk.Button(self.top)
        self.ButtonReload.place(relx=0.19, rely=0.031, height=26, width=67)
        self.ButtonReload.configure(activebackground="#d9d9d9")
        self.ButtonReload.configure(activeforeground="black")
        self.ButtonReload.configure(background="#d9d9d9")
        self.ButtonReload.configure(disabledforeground="#a3a3a3")
        self.ButtonReload.configure(font="-family {Segoe UI} -size 9")
        self.ButtonReload.configure(foreground="#000000")
        self.ButtonReload.configure(highlightbackground="#d9d9d9")
        self.ButtonReload.configure(highlightcolor="#000000")
        self.ButtonReload.configure(text='''Reload''')

        self.ButtonEject = tk.Button(self.top)
        self.ButtonEject.place(relx=0.027, rely=0.031, height=26, width=67)
        self.ButtonEject.configure(activebackground="#d9d9d9")
        self.ButtonEject.configure(activeforeground="black")
        self.ButtonEject.configure(background="#d9d9d9")
        self.ButtonEject.configure(disabledforeground="#a3a3a3")
        self.ButtonEject.configure(font="-family {Segoe UI} -size 9")
        self.ButtonEject.configure(foreground="#000000")
        self.ButtonEject.configure(highlightbackground="#d9d9d9")
        self.ButtonEject.configure(highlightcolor="#000000")
        self.ButtonEject.configure(text='''Eject Disk''')

        self.TProgressbarCopy = ttk.Progressbar(self.top)
        self.TProgressbarCopy.place(relx=0.167, rely=0.375, relwidth=0.806, relheight=0.0, height=19)
        self.TProgressbarCopy.configure(length="450")

        self.user_buttons = []
        positions = [
            (0.027, 0.556), (0.027, 0.669), (0.027, 0.781),
            (0.35, 0.556), (0.35, 0.669), (0.35, 0.781),
            (0.673, 0.556), (0.673, 0.669), (0.673, 0.781),
        ]
        for idx, (x, y) in enumerate(positions, start=1):
            btn = tk.Button(
                self.top,
                text="Not defined",
                activebackground="#d9d9d9",
                activeforeground="black",
                background="#d9d9d9",
                disabledforeground="#a3a3a3",
                font="-family {Segoe UI} -size 9",
                foreground="#000000",
                highlightbackground="#d9d9d9",
                highlightcolor="#000000",
            )
            btn.place(relx=x, rely=y, height=26, width=145)
            self.user_buttons.append(btn)
            setattr(self, f"ButtonUser{idx}", btn)

        self.TComboboxDisk = ttk.Combobox(self.top)
        self.TComboboxDisk.place(relx=0.167, rely=0.272, relheight=0.059, relwidth=0.806)
        self.TComboboxDisk.configure(font="-family {Segoe UI} -size 9")
        self.TComboboxDisk.configure(textvariable=self.combobox)

        self.EventTitle = tk.Label(self.top)
        self.EventTitle.place(relx=0.027, rely=0.15, height=21, width=454)
        self.EventTitle.configure(activebackground="#d9d9d9")
        self.EventTitle.configure(activeforeground="black")
        self.EventTitle.configure(background="#d9d9d9")
        self.EventTitle.configure(compound='left')
        self.EventTitle.configure(disabledforeground="#a3a3a3")
        self.EventTitle.configure(font="-family {Segoe UI} -size 12")
        self.EventTitle.configure(foreground="#000000")
        self.EventTitle.configure(highlightbackground="#d9d9d9")
        self.EventTitle.configure(highlightcolor="#000000")
        self.EventTitle.configure(text='''No event title assigned''')



#if __name__ == '__main__':
    #autosave.tcl_support.main()

# === Hilfsfunktionen ===
def save_config():
    with open(CONFIG_PATH, "w") as f:
        config.write(f)

def log_transfer(user, source, dest, count):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a") as f:
        f.write(f"{ts} | {user} | {source} -> {dest} | files: {count}\n")

def get_mounted_usb_devices():
    return sorted({line.split()[1] for line in open("/proc/mounts")
                   if line.startswith("/dev/sd") and "/media/" in line})

def detect_and_mount_usb():
    for part in os.listdir("/dev"):
        if part.startswith("sd") and part[-1].isdigit():
            dev = f"/dev/{part}"
            if not any(dev in line for line in open("/proc/mounts")):
                for idx in range(1, 10):
                    mount_point = f"{USB_BASE}{idx}"
                    if not os.path.exists(mount_point):
                        os.makedirs(mount_point, exist_ok=True)
                    subprocess.run(["mount", dev, mount_point], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    break

def poll_usb():
    while True:
        detect_and_mount_usb()
        update_sources()
        time.sleep(POLL_INTERVAL)

def start_usb_monitor():
    if USE_UDEV:
        context = pyudev.Context()
        monitor = pyudev.Monitor.from_netlink(context)
        monitor.filter_by(subsystem='block')

        def _callback(action, device):
            if action == 'add':
                detect_and_mount_usb()
            update_sources()

        observer = pyudev.MonitorObserver(monitor, _callback)
        observer.start()
        detect_and_mount_usb()
        update_sources()
    else:
        threading.Thread(target=poll_usb, daemon=True).start()

def update_sources():
    mounts = get_mounted_usb_devices()
    source_menu["values"] = mounts
    current = source_var.get()
    if current not in mounts:
        source_var.set(mounts[0] if mounts else "")

def check_for_updates():
    if not HAS_REQUESTS:
        return
    try:
        resp = requests.get(UPDATE_URL, timeout=5)
        remote_version = None
        for line in resp.text.splitlines():
            if line.startswith("VERSION ="):
                remote_version = line.split("=", 1)[1].strip().strip('"')
                break
        if remote_version and remote_version != VERSION:
            if messagebox.askyesno(
                "Update verfügbar",
                f"Version {remote_version} ist verfügbar. Jetzt installieren?",
            ):
                result = subprocess.run([
                    "git",
                    "pull",
                    "--ff-only",
                ], capture_output=True, text=True)
                if result.returncode == 0:
                    messagebox.showinfo(
                        "Update",
                        "Update installiert. Bitte Programm neu starten.",
                    )
                else:
                    messagebox.showerror(
                        "Update fehlgeschlagen",
                        result.stderr or "Unbekannter Fehler",
                    )
    except Exception as e:
        print("Update check failed:", e)

def copy_with_progress(src_dir, dst_dir, user, source):
    try:
        files = os.listdir(src_dir)
    except Exception as e:
        messagebox.showerror("Fehler beim Lesen", f"{src_dir} konnte nicht gelesen werden:\n{str(e)}")
        return

    if not files:
        messagebox.showinfo("Keine Dateien", "Keine Dateien im Quelllaufwerk gefunden.")
        return

    os.makedirs(dst_dir, exist_ok=True)
    progress["maximum"] = len(files)
    for idx, f in enumerate(files, start=1):
        try:
            shutil.move(os.path.join(src_dir, f), os.path.join(dst_dir, f))
        except Exception as e:
            messagebox.showerror("Fehler beim Kopieren", f"Datei konnte nicht verschoben werden:\n{f}\n{str(e)}")
        progress["value"] = idx
        root.update_idletasks()
    log_transfer(user, source, dst_dir, len(files))
    messagebox.showinfo("Fertig", f"{len(files)} Datei(en) verschoben.")
    progress["value"] = 0

def on_user_button(u):
    src = source_var.get()
    if not src or not os.path.ismount(src):
        messagebox.showerror("Fehler", f"{src} ist nicht gemountet.")
        return
    event = config["GENERAL"].get("event_title")
    dest = os.path.join(SSD_BASE, event, u)
    threading.Thread(target=copy_with_progress, args=(src, dest, u, src), daemon=True).start()

def eject_device():
    src = source_var.get()
    if src:
        device = subprocess.run([
            "findmnt", "-n", "-o", "SOURCE", src
        ], capture_output=True, text=True).stdout.strip()
        subprocess.run(["udisksctl", "unmount", "-b", device], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["udisksctl", "power-off", "-b", device], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        update_sources()

def add_user():
    name = simpledialog.askstring("Benutzer hinzufügen", "Name:")
    if name:
        config["USERS"][name] = ""
        save_config()
        refresh_user_list()

def edit_settings():
    def save_settings():
        new_title = title_var.get()
        config["GENERAL"]["event_title"] = new_title
        save_config()
        event_label.config(text=new_title)
        settings_win.destroy()

    settings_win = tk.Toplevel(root)
    settings_win.title("Einstellungen")
    tk.Label(settings_win, text="Veranstaltungstitel:").pack(pady=5)
    title_var = tk.StringVar(value=config["GENERAL"].get("event_title"))
    title_entry = tk.Entry(settings_win, textvariable=title_var, width=30)
    title_entry.pack(pady=5)
    title_entry.bind("<Button-1>", lambda e: subprocess.Popen(["matchbox-keyboard"]))
    tk.Button(settings_win, text="Speichern", command=save_settings).pack(pady=10)

def restart_program():
    root.destroy()
    time.sleep(2)
    os.execv(sys.executable, ['python3'] + sys.argv)
    
def open_config_editor():
    subprocess.Popen(["mousepad", CONFIG_PATH])

# === GUI Start ===


root = tk.Tk()
app = Toplevel1(root)

# GUI-Elemente verbinden
source_var = app.combobox
source_menu = app.TComboboxDisk
progress = app.TProgressbarCopy
event_label = app.EventTitle

for btn in app.user_buttons:
    btn.configure(command=lambda b=btn: on_user_button(b.cget("text")))

app.ButtonEject.configure(command=eject_device)
app.ButtonSettings.configure(command=open_config_editor)
app.ButtonReload.configure(command=update_sources)
app.ButtonRestart.configure(command=restart_program)

# Benutzer in Buttons eintragen
def refresh_user_list():
    users = list(config["USERS"].keys())
    for i, btn in enumerate(app.user_buttons):
        if i < len(users):
            btn.configure(text=users[i], state="normal", command=lambda u=users[i]: on_user_button(u))
        else:
            btn.configure(text="Not defined", state="disabled")

def main():
    refresh_user_list()
    update_sources()
    start_usb_monitor()
    if HAS_REQUESTS:
        check_for_updates()
    event_label.configure(
        text=config["GENERAL"].get("event_title", "Unbenannte Veranstaltung")
    )
    root.mainloop()


if __name__ == "__main__":
    main()
